import"@abraham/reflection";import{container as e,injectable as t,singleton as o,instanceCachingFactory as r}from"tsyringe";import{Subject as a,of as s}from"rxjs";import{takeLast as n,filter as i,delay as d,mergeMap as l}from"rxjs/operators";function __decorate(e,t,o,r){var a,s=arguments.length,n=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,o,r);else for(var i=e.length-1;i>=0;i--)(a=e[i])&&(n=(s<3?a(n):s>3?a(t,o,n):a(t,o))||n);return s>3&&n&&Object.defineProperty(t,o,n),n}function __metadata(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}var c,u,p;function Cast(e={trim:!0}){return function(t,o){e.property=e.property||o,e.trim=!1!==e.trim;const r=Reflect.getMetadata(c.CONFIG,t)||{};r[o]=e,Reflect.defineMetadata(c.CONFIG,r,t)}}function HasMany(e){return function(t,o){const r={type:u.HAS_MANY,model:e};Reflect.defineMetadata(c.RELATIONS,r,t,o)}}function HasOne(e){return function(t,o){const r={type:u.HAS_ONE,model:e};Reflect.defineMetadata(c.RELATIONS,r,t,o)}}function isNull(){return e=>null===e}function castToBoolean(e="1"){return t=>!0===t||t===e}function castBooleanToString(e="1",t="0"){return o=>!0===o?e:t}function castToNumber(e=!0){return t=>{if(e&&null===t)return null;"string"==typeof t&&(t=t.replace(",","."));const o=Number(t);return Number.isNaN(o)?0:o}}function castFromJson(e=!0){return t=>{if(e&&null===t)return null;try{if("string"==typeof t)return JSON.parse(t);if("object"==typeof t&&null!==t)return t}catch(e){}return{}}}function castToString(e=!0,t=""){return o=>e&&null===o?null:null!=o?String(o):t}!function(e){e.CONFIG="json-entity:casting:config",e.RELATIONS="json-entity:casting:relations"}(c||(c={})),function(e){e[e.HAS_ONE=0]="HAS_ONE",e[e.HAS_MANY=1]="HAS_MANY"}(u||(u={}));class JsonEntityModel{static createRelations(e,t,o=!0){if(t)switch(e.type){case u.HAS_ONE:return(new e.model).cast(t,o);case u.HAS_MANY:const r=[];for(const a of Object.keys(t))r.push((new e.model).cast(t[a],o));return r}}cast(e,t=!0){const o=this,r=Reflect.getMetadata(c.CONFIG,this)||{};if(null!==e)for(const a of Object.keys(r)){const s=r[a];let n=e[t?s.property:a];const i=Reflect.getMetadata(c.RELATIONS,this,a);i&&(n=JsonEntityModel.createRelations(i,n,t)),s.trim&&"string"==typeof n&&(n=n.trim()),void 0!==n&&(o[a]=n)}return this}}class ModuleOptionsDecoratorModel extends JsonEntityModel{constructor(){super(...arguments),this.imports=[]}}__decorate([Cast(),__metadata("design:type",Array)],ModuleOptionsDecoratorModel.prototype,"imports",void 0);class QueueModel extends JsonEntityModel{constructor(){super(...arguments),this.before=new Map,this.beforeCount=new a,this.after=new Map,this.afterCount=new a,this.afterBootstrap=new Map,this.afterBootstrapCount=new a}}__decorate([Cast(),__metadata("design:type",Map)],QueueModel.prototype,"before",void 0),__decorate([Cast(),__metadata("design:type",a)],QueueModel.prototype,"beforeCount",void 0),__decorate([Cast(),__metadata("design:type",Map)],QueueModel.prototype,"after",void 0),__decorate([Cast(),__metadata("design:type",a)],QueueModel.prototype,"afterCount",void 0),__decorate([Cast(),__metadata("design:type",Map)],QueueModel.prototype,"afterBootstrap",void 0),__decorate([Cast(),__metadata("design:type",a)],QueueModel.prototype,"afterBootstrapCount",void 0);class QueueItemModel extends JsonEntityModel{constructor(){super(...arguments),this.doneCheckIntervalTime=5e3}}__decorate([Cast({from:castToString()}),__metadata("design:type",String)],QueueItemModel.prototype,"target",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],QueueItemModel.prototype,"methodName",void 0),__decorate([Cast({from:castToNumber()}),__metadata("design:type",Number)],QueueItemModel.prototype,"doneCheckIntervalTime",void 0);class EventModel extends JsonEntityModel{}__decorate([Cast({from:castToString()}),__metadata("design:type",String)],EventModel.prototype,"type",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],EventModel.prototype,"eventName",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],EventModel.prototype,"methodName",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],EventModel.prototype,"targetName",void 0);class CommandModel extends JsonEntityModel{}__decorate([Cast({from:castToString()}),__metadata("design:type",String)],CommandModel.prototype,"target",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],CommandModel.prototype,"methodName",void 0);let m=p=class UtilsService{static setTimeout(t,o){const r=e.resolve("alt.setTimeout"),a=e.resolve("alt.clearTimeout"),s=r((async()=>{await t(),a(s)}),o)}static setInterval(t,o){return e.resolve("alt.setInterval")(t,o)}static everyTick(t){return e.resolve("alt.everyTick")(t)}static autoClearInterval(t,o,r){const a=e.resolve("alt.setInterval"),s=e.resolve("alt.clearInterval"),n=a(t,o);p.setTimeout((()=>{s(n)}),r)}static nextTick(t){e.resolve("alt.nextTick")(t)}static clearInterval(t){return e.resolve("alt.clearInterval")(t)}static clearTimeout(t){return e.resolve("alt.clearTimeout")(t)}static clearNextTick(t){return e.resolve("alt.clearNextTick")(t)}static clearEveryTick(t){return e.resolve("alt.clearEveryTick")(t)}static convertToEventName(e){return e.replace(/([a-zA-Z])(?=[A-Z])/g,"$1:").toLowerCase()}static convertToCamelCase(e){return e.replace(/[:]/g," ").replace(/(?:^\w|[A-Z]|\b\w)/g,((e,t)=>0===t?e.toLowerCase():e.toUpperCase())).replace(/\s+/g,"")}static log(...t){e.resolve("alt.log")(...t)}static logWarning(...t){e.resolve("alt.logWarning")(...t)}static logError(...t){e.resolve("alt.logError")(...t)}static logLoaded(...e){e.forEach((e=>p.log(`Loaded ~lg~${e}~w~`)))}static logUnloaded(...e){e.forEach((e=>p.log(`Unloaded ~lg~${e}~w~`)))}static eventOn(t,o){e.resolve("alt.on")(t,o)}static eventOnce(t,o){e.resolve("alt.once")(t,o)}static eventOff(t,o){e.resolve("alt.off")(t,o)}static eventEmit(t,...o){e.resolve("alt.emit")(t,...o)}};m=p=__decorate([t()],m);let g=class LoaderService{constructor(){this.queue=new QueueModel,this.beforeCount$=this.queue.beforeCount.asObservable(),this.afterCount$=this.queue.afterCount.asObservable(),this.afterBootstrapCount$=this.queue.afterBootstrapCount.asObservable(),this.startingSubject=new a,this.startingSubject$=this.startingSubject.asObservable().pipe(n(1),i((e=>e))),this.finishSubject$=new a,this.isServerSide="undefined"!=typeof process}debug(){return JSON.stringify({loader:{beforeQueueWaiting:this.queue.before.size,afterQueueWaiting:this.queue.after.size,afterBootstrapQueueWaiting:this.queue.afterBootstrap.size}},null,4)}afterComplete(e){this.finishSubject$.asObservable().pipe(i((e=>e))).subscribe(e)}add(e,t,o,r){const a=(new QueueItemModel).cast({target:o,methodName:t,doneCheckIntervalTime:r});this.queue[e].set(`${o}_${t}`,a)}bootstrap(t){if(e.afterResolution(t,((e,t)=>{this.resolve(),m.setTimeout((()=>{this.startingSubject.next(!0),this.startingSubject.complete()}),0)}),{frequency:"Once"}),this.beforeCount$.pipe(n(1)).subscribe((()=>this.processWork(this.queue.after,this.queue.afterCount))),this.afterCount$.pipe(n(1)).subscribe((()=>this.processWork(this.queue.afterBootstrap,this.queue.afterBootstrapCount))),this.afterBootstrapCount$.pipe(n(1)).subscribe((()=>{this.finishSubject$.next(!0),this.finishSubject$.complete()})),this.isServerSide){let t;try{t=e.resolve("server.database.entities")}catch{t=[]}this.startingSubject$=this.startingSubject$.pipe(d(125),l((()=>{if(t.length){return e.resolve("DatabaseService").initialize()}return s(!0)})))}return this.startingSubject$.subscribe((()=>this.processWork(this.queue.before,this.queue.beforeCount))),e.resolve(t),this}resolve(){this.queue.beforeCount.next(this.queue.before.size),this.queue.afterCount.next(this.queue.after.size)}doneCallback(e,t,o=null,r){r&&m.clearInterval(r),null!==o&&e.delete(o),t.next(e.size),0===e.size&&t.complete()}processWork(e,t){0===e.size?this.doneCallback(e,t):(t.pipe(i((e=>0!==e))).subscribe((()=>this.processQueueItem(e,t))),this.processQueueItem(e,t))}async processQueueItem(t,o){const r=t.values().next().value,a=t.keys().next().value;if(void 0!==r){const s=e.resolve(r.target),n=m.setInterval((()=>{const[e,t]=a.split("_");m.log(`~lb~[Module: ${e}]~y~{Method: ${t}}~w~ - ~r~Have you maybe forgotten the done callback?~w~`),m.log(`~y~If not, increase decorator runtime parameter ~w~[yours: ${r.doneCheckIntervalTime}ms] ~lg~[default: 5000ms] ~w~`),m.clearInterval(n)}),r.doneCheckIntervalTime),i=this.doneCallback.bind(this,t,o,a,n),d=s[r.methodName].bind(s,i);await d()}}};g=__decorate([o()],g);let v=class LoggerService{info(...e){m.log(e)}warning(...e){m.logWarning(e)}error(...e){m.logError(e)}starting(e){m.log(`Starting ~y~${e}~w~`)}started(e){m.log(`Started ~lg~${e}~w~`)}};v=__decorate([t()],v);const StringResolver=t=>(e.register(t.name,{useFactory:r((e=>e.resolve(t)))}),t);class DiscordConfigModel extends JsonEntityModel{}__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordConfigModel.prototype,"client_id",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordConfigModel.prototype,"client_secret",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordConfigModel.prototype,"bot_secret",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordConfigModel.prototype,"server_id",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordConfigModel.prototype,"redirect_url",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordConfigModel.prototype,"auth_url",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordConfigModel.prototype,"auth_token_url",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordConfigModel.prototype,"user_me_url",void 0),__decorate([Cast(),__metadata("design:type",Object)],DiscordConfigModel.prototype,"presences",void 0);class DiscordEventModel extends JsonEntityModel{}__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordEventModel.prototype,"eventName",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordEventModel.prototype,"targetName",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordEventModel.prototype,"methodName",void 0);class DiscordUserModel extends JsonEntityModel{constructor(){super(...arguments),this.avatarUrl="/images/128.jpg"}}__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordUserModel.prototype,"id",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordUserModel.prototype,"username",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordUserModel.prototype,"avatar",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordUserModel.prototype,"discriminator",void 0),__decorate([Cast({from:castToNumber()}),__metadata("design:type",Number)],DiscordUserModel.prototype,"public_flags",void 0),__decorate([Cast({from:castToNumber()}),__metadata("design:type",Number)],DiscordUserModel.prototype,"flags",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordUserModel.prototype,"locale",void 0),__decorate([Cast({from:castToBoolean()}),__metadata("design:type",Boolean)],DiscordUserModel.prototype,"mfa_enabled",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],DiscordUserModel.prototype,"avatarUrl",void 0);class AccessTokenModel extends JsonEntityModel{}__decorate([Cast({from:castToString()}),__metadata("design:type",String)],AccessTokenModel.prototype,"access_token",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],AccessTokenModel.prototype,"token_type",void 0),__decorate([Cast({from:castToNumber()}),__metadata("design:type",Number)],AccessTokenModel.prototype,"expires_in",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],AccessTokenModel.prototype,"refresh_token",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],AccessTokenModel.prototype,"scope",void 0);class ValidateOptionsModel extends JsonEntityModel{constructor(){super(...arguments),this.eventAddTo="base"}}__decorate([Cast({from:castToString()}),__metadata("design:type",String)],ValidateOptionsModel.prototype,"eventAddTo",void 0),__decorate([Cast({from:castToNumber()}),__metadata("design:type",Number)],ValidateOptionsModel.prototype,"entity",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],ValidateOptionsModel.prototype,"metaKey",void 0),__decorate([Cast({from:castToNumber()}),__metadata("design:type",Number)],ValidateOptionsModel.prototype,"colShapeType",void 0),__decorate([Cast({from:castToString()}),__metadata("design:type",String)],ValidateOptionsModel.prototype,"name",void 0);class EntityHandleModel extends EventModel{}__decorate([HasOne(ValidateOptionsModel),Cast(),__metadata("design:type",ValidateOptionsModel)],EntityHandleModel.prototype,"options",void 0);let f=class BaseEventService{constructor(){this.events=[],this.handlers=[]}get handlerTypes(){return["syncedMetaChange","streamSyncedMetaChange","gameEntityCreate","gameEntityDestroy","entityEnterColshape","entityLeaveColshape"]}get availableDecoratorListenerTypes(){return["on","once","onGui","onServer","onClient","onceServer","onceClient"]}autoStart(e){this.events.length&&(m.log("Starting ~y~EventService Decorator~w~"),this.startBaseMethods(),m.log("Started ~lg~EventService Decorator~w~")),this.handlers.length&&(m.log("Starting ~y~EntityEvent Handle Decorator~w~"),this.startEntityHandle(),m.log("Started ~lg~EntityEvent Handle Decorator~w~")),e()}add(e,t,o,r){if(this.availableDecoratorListenerTypes.includes(e)){const a=(new EventModel).cast({type:e,eventName:r.name,targetName:t,methodName:o});this.events.push(a)}}addHandlerMethods(e,t,o,r){if(this.handlerTypes.includes(e)){const a=(new EntityHandleModel).cast({type:e,targetName:t,methodName:o,options:r});this.handlers.push(a)}}on(e,t){m.eventOn(e,t)}once(e,t){m.eventOnce(e,t)}off(e,t){m.eventOff(e,t)}emit(e,...t){m.eventEmit(e,...t)}listenHandlerForType(e,t){}handleMetaChangeMethods(t,o,r,a=!1,...s){r.forEach((r=>{if(!this.isEntityType(o,r.options.entity))return;const n=void 0!==r.options.metaKey&&s[0]===r.options.metaKey;e.resolveAll(r.targetName).forEach((e=>{const o=e[r.methodName].bind(e);a&&n&&s.shift(),o(t,...s)}))}))}isEntityType(e,t){return e===t}startEntityHandle(){this.handlerTypes.forEach((e=>{const t=this.getHandler(e);t.length&&this.listenHandlerForType(e,t)}))}getHandler(e){return this.handlers.filter((t=>t.type===e))}startBaseMethods(){this.events.forEach((t=>{const o=e.resolveAll(t.targetName),r=this[t.type];o.forEach((async e=>{if(e[t.methodName]){const o=r.bind(this,t.eventName,e[t.methodName].bind(e));await o()}}))}))}};f=__decorate([StringResolver,o()],f);let _=class CommandService{constructor(){this.commands=new Map,this.cmdArgs=[],this.prefix="/"}add(e,t,o){if(this.commands.has(e))return;const r=(new CommandModel).cast({methodName:t,target:o});this.commands.set(e,r)}run(t){let o=t.slice(this.prefix.length);if(t.startsWith(this.prefix)&&this.commands.has(o)){const t=this.commands.get(o);e.resolveAll(t.target).forEach((e=>{e[t.methodName]&&e[t.methodName].bind(e).apply(this,this.cmdArgs)}))}}setPrefix(e){this.prefix=e}start(){e.resolve(f).on("consoleCommand",this.consoleCommand.bind(this))}autoStart(e){this.commands.size>0&&(m.log("Starting ~y~CommandService Decorator~w~"),this.start(),m.log("Started ~lg~CommandService Decorator~w~")),e()}setArguments(e){this.cmdArgs=e}consoleCommand(e,...t){this.setArguments(t),this.run(e)}};_=__decorate([StringResolver,o()],_);const h=e.resolve(g);function altLibRegister(t){e.register("alt.setTimeout",{useValue:t.setTimeout}),e.register("alt.clearTimeout",{useValue:t.clearTimeout}),e.register("alt.nextTick",{useValue:t.nextTick}),e.register("alt.clearNextTick",{useValue:t.clearNextTick}),e.register("alt.setInterval",{useValue:t.setInterval}),e.register("alt.clearInterval",{useValue:t.clearInterval}),e.register("alt.everyTick",{useValue:t.everyTick}),e.register("alt.clearEveryTick",{useValue:t.clearEveryTick}),e.register("alt.log",{useValue:t.log}),e.register("alt.logWarning",{useValue:t.logWarning}),e.register("alt.logError",{useValue:t.logError}),e.register("alt.on",{useValue:t.on}),e.register("alt.once",{useValue:t.once}),e.register("alt.off",{useValue:t.off}),e.register("alt.emit",{useValue:t.emit})}function setupServerConfigPath(t){e.register("server.config.path.file",{useValue:t})}function setupServerDatabaseEntities(t){e.register("server.database.entities",{useValue:t})}function setupWebviewRegistry(t,o){e.register("alt.webview.url",{useValue:t}),e.register("alt.webview.routeTo.eventName",{useValue:o})}function setDiscordApiServerPort(t){e.register("discord.express.port",{useValue:t})}e.afterResolution("EventService",(()=>{h.add("afterBootstrap","autoStart","EventService")}),{frequency:"Once"}),e.afterResolution(_,(()=>{h.add("afterBootstrap","autoStart","CommandService")}),{frequency:"Once"});let y=class ModuleLoaderService{constructor(){this.pool=new Map}add(e){this.addToPool(e),this.registerIfNotExists(e),this.resolve(e)}addToPool(e){if(this.pool.has(e.name)){const t=this.pool.get(e.name);this.pool.set(e.name,[...t,e.name])}else this.pool.set(e.name,[e.name]),e.name.endsWith("Module")&&m.logLoaded(e.name)}registerIfNotExists(t){e.isRegistered(t.name)||e.register(t.name,{useFactory:r((e=>e.resolve(t)))})}resolve(t){t.name.endsWith("Module")||e.resolve(t.name)}};function Module(t){const o=e.resolve(y);return t&&(t.imports&&t.imports.forEach((e=>o.add(e))),t.components&&t.components.forEach((e=>o.add(e)))),e=>(o.add(e),e)}y=__decorate([o()],y);const Before=e=>(t,o,r)=>validateLoaderAndPush(t,o,"before",r,e),After=e=>(t,o,r)=>validateLoaderAndPush(t,o,"after",r,e),AfterBootstrap=e=>(t,o,r)=>validateLoaderAndPush(t,o,"afterBootstrap",r,e);function validateLoaderAndPush(t,o,r,a,s){const n=e.resolve(g),i=a.value;return a.value=function(...e){return i.apply(this,e)},n.add(r,o,t.constructor.name,s),a}const On=e=>(t,o,r)=>{const a=e||o;return validateEventExistsAndPush(t,"on",o,r,(new ValidateOptionsModel).cast({name:a}))},Once=e=>(t,o,r)=>{const a=e||o;return validateEventExistsAndPush(t,"once",o,r,(new ValidateOptionsModel).cast({name:a}))};function validateEventExistsAndPush(t,o,r,a,s){const n=e.resolve("EventService"),i=a.value;switch(a.value=function(...e){return i.apply(this,e)},s.eventAddTo){case"gameEntity":case"metaChange":case"colShape":n.addHandlerMethods(o,t.constructor.name,r,s);break;default:n.add(o,t.constructor.name,r,s)}return a}const Cmd=t=>(o,r,a)=>{const s=t||r,n=e.resolve(_),i=a.value;return a.value=function(...e){return i.apply(this,e)},n.add(s,r,o.constructor.name),a};class BasePool{constructor(){this.pool=new Map}get size(){return this.pool.size}add(e,t){this.has(e)||this.pool.set(e,t)}get(e){if(this.has(e))return this.pool.get(e)}has(e){return this.pool.has(e)}entries(){return Array.from(this.pool.values())}keys(){return Array.from(this.pool.keys())}remove(e){return this.pool.delete(e)}removeAll(){this.pool.clear()}}const S={EventService:{EmitGuiEvent:"event:emit:gui:event",ServerEmitGui:"server:emit:gui",GuiOn:"gui:on",GuiEmitServer:"gui:emit:server"},Discord:{AuthDone:"express:discordUser:accessDone"},Player:{SetRealTime:"player:set:realtime"}};export{AccessTokenModel,After,AfterBootstrap,f as BaseEventService,BasePool,Before,Cast,Cmd,CommandModel,_ as CommandService,DiscordConfigModel,DiscordEventModel,DiscordUserModel,EntityHandleModel,EventModel,S as FrameworkEvent,HasMany,HasOne,JsonEntityModel,g as LoaderService,v as LoggerService,Module,ModuleOptionsDecoratorModel,On,Once,QueueItemModel,QueueModel,StringResolver,m as UtilsService,ValidateOptionsModel,altLibRegister,castBooleanToString,castFromJson,castToBoolean,castToNumber,castToString,isNull,setDiscordApiServerPort,setupServerConfigPath,setupServerDatabaseEntities,setupWebviewRegistry,validateEventExistsAndPush};
